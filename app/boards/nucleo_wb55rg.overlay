/ {
    /* PWM V_sig Drive */
	pwmdrives: pwmdrives {
		compatible = "pwm-leds";
		status = "okay";

		ccDrive: ccDrive {
			pwms = <&pwm2 2 PWM_NSEC(15) PWM_POLARITY_NORMAL>;
		};
	};

    /* GPIO SHDN Signals */
    shdn_gpios: shdn_gpios {
        compatible = "gpio-leds";
        cc_shdn_low: cc_shdn_low {
			gpios = < &gpioa 0x13 0x0 >;
			label = "Drive low to turn off CC Drive Amplifiers";
		};
        adc_shdn_low: adc_shdn_low {
			gpios = < &gpiob 0x4 0x0 >;
			label = "Drive low to turn off ADC power and references";
		};
    };

    aliases {
        my-ccdrive = &ccDrive;
        my-adc-shdn-low = &adc_shdn_low;
        my-cc-shdn-low = &cc_shdn_low;
        ad4002-ch1 = &ad4002_1;
        ad4002-ch2 = &ad4002_2;
    };

};

&usart1{
    stop-bits = "1";
    parity = "none";
    data-bits = <8>;
    status = "okay";
};

#define STM32_DMA_RX_FLAGS (STM32_DMA_PRIORITY_VERY_HIGH | STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS | STM32_DMA_MEM_INC | STM32_DMA_PERIPH_TO_MEMORY | STM32_DMA_MODE_CYCLIC)

#define STM32_DMA_TX_FLAGS (STM32_DMA_PRIORITY_VERY_HIGH | STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS | STM32_DMA_MEMORY_TO_PERIPH | STM32_DMA_MODE_CYCLIC)

&spi1 {
	status = "okay";
	pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pa6>; // Potentially can omit nss and mosi if not using
	pinctrl-names = "default";
	dmas = <&dma1 2 6 STM32_DMA_RX_FLAGS>, 
            <&dma1 3 7 STM32_DMA_TX_FLAGS>; // DMA1, channel 2, interrupt 6 corresponds to SPI 1 RX, channel 3 interrupt 7 to tx
    dma-names = "rx", "tx";
	
	ad4002_1: ad4002@0{
        reg = <0>; // Ignored, but necessary for SPI bindings
		compatible = "analog,ad4002";
		status = "okay";
        spi-max-frequency = <32000000>;
        spi-cpha;
        spi-master;
        pwms = <&pwm1 1 PWM_NSEC(15) PWM_POLARITY_NORMAL>;
        sample_period = <62>; // In clock cycles, adjust if clock frequency is not 64 MHz
	};
};

&spi2 {
	status = "okay";
	pinctrl-0 = <&spi2_sck_pb10 &spi2_mosi_pb15>; // Potentially can omit nss and miso if not using
	pinctrl-names = "default";
	dmas = <&dma1 4 8 STM32_DMA_RX_FLAGS>; // DMA1, channel 4, interrupt 8 corresponds to SPI 2 RX
    dma-names = "rx";
	
	ad4002_2: ad4002@1{
        reg = <1>; // Ignored, but necessary for SPI bindings
		compatible = "analog,ad4002";
		status = "okay";
        spi-max-frequency = <32000000>; // Required by included spi-device.yaml
        spi-cpha;
	};
};

&spi1_sck_pa5 {
    //bias-pull-down;
    slew-rate = "medium-speed";
};

&spi2_sck_pb10 {
    //bias-pull-down;
    slew-rate = "medium-speed";
};

&dma1 {
    status = "okay";
};


&clk_hse {
	clock-frequency = <DT_FREQ_M(32)>; /* X1 32MHz oscillator with /2 prescalar */
	status = "okay";
};

&clk_lsi1 {
	status = "disabled"; // Enabled by nucleo
};

// This sets the PLL source to be HSE and sets the output frequency to be 64 MHz (max). Not configured by nucleo
&pll {
	div-m = <2>;
	mul-n = <8>;
	div-p = <2>;
	div-q = <2>;
	div-r = <2>;
	clocks = <&clk_hse>;
	status = "okay";
};

// This sets the system clock source as the PLL and defines the clock frequency as 64 MHz. 
&rcc {
	clocks = <&pll>; //nucleo has set to hse so overwrite
	clock-frequency = <DT_FREQ_M(64)>;
    //apb1-prescaler = <1>; // Commented out sections are already written by nucleo
    //apb2-prescaler = <1>;
    //cpu1-prescaler = <1>;
    cpu2-prescaler = <2>;
    //ahb4-prescaler = <1>;
};

/* For V_SIG */
&timers2 {
    status = "okay";
    st,prescaler = < 99 >;
    pwm2: pwm {
        //compatible = "st,stm32-pwm-custom-trigger";
        status = "okay";
        pinctrl-0 = <&tim2_ch2_pa1>;
        pinctrl-names = "default";
    };
};

/* For CNV */
&timers1 {
    status = "okay";
    st,prescaler = <1>;
    pwm1: pwm {
        status = "okay";
        pinctrl-0 = <&tim1_ch1_pa8>;
        pinctrl-names = "default";
    };
};