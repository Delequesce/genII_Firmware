/ {
    /* PWM V_sig Drive and heater */
	pwmdrives: pwmdrives {
		compatible = "pwm-leds";
		status = "okay";

		ccDrive: ccDrive {
			pwms = <&pwm2 2 PWM_NSEC(15) PWM_POLARITY_NORMAL>;
		};

        heaterPwm: heaterPwm { 
            pwms = <&pwm16 1 PWM_NSEC(1000000) PWM_POLARITY_NORMAL>;
        };
	};

    /* GPIO SHDN Signals */
    shdn_gpios: shdn_gpios {
        compatible = "gpio-leds";
        adc_shdn_low: adc_shdn_low {
			gpios = < &gpioc 0x4 0x0 >;
			label = "Drive low to turn off ADC power, references, and drive amps";
		};
        tia_1_shdn_low: tia_1_shdn_low {
            //gpios = < &gpioc 0x0 0x0 >;
            gpios = < &gpioa 0xF 0x0 >;
			label = "TIA 1 SHDN LOW for multiplexing and power savings";
        };
        tia_2_shdn_low: tia_2_shdn_low {
            //gpios = < &gpioa 0xF 0x0 >;
            gpios = < &gpioc 0x6 0x0 >;
			label = "TIA 2 SHDN LOW for multiplexing and power savings";
        };
        tia_3_shdn_low: tia_3_shdn_low {
            //gpios = < &gpioa 0x0 0x0 >;
            gpios = < &gpioc 0x0 0x0 >;
			label = "TIA 3 SHDN LOW for multiplexing and power savings";
        };
        tia_4_shdn_low: tia_4_shdn_low {
            //gpios = < &gpioc 0x6 0x0 >;
            gpios = < &gpioa 0x0 0x0 >;
			label = "TIA 4 SHDN LOW for multiplexing and power savings";
        };
       /* heater_en: heater_en {
            gpios = <&gpiob 0xB 0x0>;
            label = "High enable for heater power";
        };*/

    };

    aliases {
        my-ccdrive = &ccDrive;
        my-adc-shdn-low = &adc_shdn_low;
        my-tia1-shdn-low = &tia_1_shdn_low;
        my-tia2-shdn-low = &tia_2_shdn_low;
        my-tia3-shdn-low = &tia_3_shdn_low;
        my-tia4-shdn-low = &tia_4_shdn_low;
        //my-heater-en = &heater_en;
        my-heaterpwm = &heaterPwm;
        ad4002-ch1 = &ad4002_1;
        ad4002-ch2 = &ad4002_2;
    };

};

/ {
	zephyr,user {
		/* adjust channel number according to pinmux in board.dts */
		io-channels = <&adc1 7>, <&adc1 4>;
        io-channel-names = "Vth2", "Vth1";
	};
};

&adc1{
    #address-cells = <1>;
	#size-cells = <0>;
    st,adc-clock-source = "ASYNC";
    st,adc-prescaler = <256>;
    clocks = < &rcc 0x4c 0x2000 >, <&rcc STM32_SRC_PCLK ADC_SEL(2)>;
    //vref-mv = <2500>;
    //status = "okay";
    pinctrl-0 = <&adc1_in7_pa2 &adc1_in4_pc3>;
    //pinctrl-0 = <&adc1_in3_pc2>;
    pinctrl-names = "default";

    channel@4{
        reg = <4>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_MAX>;
		zephyr,resolution = <12>;
    };
    channel@7{
        reg = <7>;
        zephyr,gain = "ADC_GAIN_1";
        zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_MAX>;
		zephyr,resolution = <12>;
    };
};

&usart1{
    stop-bits = "1";
    parity = "none";
    data-bits = <8>;
    status = "okay";
};

&flash{
    status = "okay";
};


#define STM32_DMA_RX_FLAGS (STM32_DMA_PRIORITY_VERY_HIGH | STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS | STM32_DMA_MEM_INC | STM32_DMA_PERIPH_TO_MEMORY | STM32_DMA_MODE_CYCLIC)

#define STM32_DMA_TX_FLAGS (STM32_DMA_PRIORITY_VERY_HIGH | STM32_DMA_MEM_16BITS | STM32_DMA_PERIPH_16BITS | STM32_DMA_MEMORY_TO_PERIPH)

&spi1 {
	status = "okay";
	pinctrl-0 = <&spi1_sck_pa5 &spi1_miso_pb4>;
	pinctrl-names = "default";
	dmas = <&dma1 2 6 STM32_DMA_RX_FLAGS>, 
            <&dma1 3 22 STM32_DMA_TX_FLAGS>; // DMA1, channel 2, interrupt 6 corresponds to SPI 1 RX, channel 3 interrupt 7 to tx. Request 22 corresponds to our heads up timer. 
    dma-names = "rx", "tx";
	
	ad4002_1: ad4002@0{
        reg = <0>; // Ignored, but necessary for SPI bindings
		compatible = "analog,ad4002";
		status = "okay";
        spi-max-frequency = <32000000>;
        spi-cpha;
        spi-master;
        pwms = <&pwm1 1 PWM_NSEC(15) PWM_POLARITY_NORMAL>;
        sample_period = <62>; // In clock cycles, adjust if clock frequency is not 64 MHz
	};
};

&spi2 {
	status = "okay";
	pinctrl-0 = <&spi2_sck_pb10 &spi2_mosi_pb15>;
	pinctrl-names = "default";
	dmas = <&dma1 4 8 STM32_DMA_RX_FLAGS>; // DMA1, channel 4, interrupt 8 corresponds to SPI 2 RX
    dma-names = "rx";
	
	ad4002_2: ad4002@1{
        reg = <1>; // Ignored, but necessary for SPI bindings
		compatible = "analog,ad4002";
		status = "okay";
        spi-max-frequency = <32000000>; // Required by included spi-device.yaml
        spi-cpha;
	};
};


&spi1_sck_pa5 {
    //bias-pull-down;
    slew-rate = "medium-speed";
};

&spi2_sck_pb10 {
    //bias-pull-down;
    slew-rate = "medium-speed";
};

&tim2_ch2_pa1 {
    //bias-pull-down;
    slew-rate = "low-speed";
};

&dma1 {
    status = "okay";
    compatible = "cad,dma-minimal";
};


&clk_hse {
	clock-frequency = <DT_FREQ_M(32)>; /* X1 32MHz oscillator with /2 prescalar */
	status = "okay";
};

&clk_lsi1 {
	status = "disabled"; // Enabled by nucleo
};

&clk_lse {
    status = "disabled";
};

// This sets the PLL source to be HSE and sets the output frequency to be 64 MHz (max). Not configured by nucleo
&pll {
	div-m = <2>;
	mul-n = <8>;
	div-p = <32>;
	div-q = <2>;
	div-r = <2>;
	clocks = <&clk_hse>;
	status = "okay";
};

// This sets the system clock source as the PLL and defines the clock frequency as 64 MHz. 
&rcc {
	clocks = <&pll>; //nucleo has set to hse so overwrite
	clock-frequency = <DT_FREQ_M(64)>;
    //apb1-prescaler = <1>; // Commented out sections are already written by nucleo
    //apb2-prescaler = <1>;
    //cpu1-prescaler = <1>;
    cpu2-prescaler = <2>;
    //ahb4-prescaler = <1>;
};

/* For V_SIG */
&timers2 {
    status = "okay";
    st,prescaler = <0>;
    pwm2: pwm {
        //compatible = "st,stm32-pwm-custom-fast";
        status = "okay";
        pinctrl-0 = <&tim2_ch2_pa1>;
        //pinctrl-0 = <&tim2_ch2_pa1>;
        pinctrl-names = "default";
    };
};

/* For CNV */
&timers1 {
    status = "okay";
    st,prescaler = <0>;
    pwm1: pwm {
        status = "okay";
        pinctrl-0 = <&tim1_ch1_pa8>;
        pinctrl-names = "default";
    };
};

/* For Heater PWM */
&timers16 {
    status = "okay";
    st,prescaler = <2548>; // Around 25 kHz
    pwm16: pwm {
        status = "okay";
        pinctrl-0 = <&tim16_ch1_pb8>;
        pinctrl-names = "default";
    };
};

&tim1_ch1_pa8 {
    bias-pull-down;
};

// Heater PWM
&tim16_ch1_pb8 {
    slew-rate = "low-speed";
};

